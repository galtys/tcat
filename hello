#!/usr/bin/env node
"use strict";

(function(){

const $JSRTS = {
    throw: function (x) {
        throw x;
    },
    Lazy: function (e) {
        this.js_idris_lazy_calc = e;
        this.js_idris_lazy_val = void 0;
    },
    force: function (x) {
        if (x === undefined || x.js_idris_lazy_calc === undefined) {
            return x
        } else {
            if (x.js_idris_lazy_val === undefined) {
                x.js_idris_lazy_val = x.js_idris_lazy_calc()
            }
            return x.js_idris_lazy_val
        }
    },
    prim_strSubstr: function (offset, len, str) {
        return str.substr(Math.max(0, offset), Math.max(0, len))
    }
};
$JSRTS.os = require('os');

$JSRTS.fs = require('fs');

$JSRTS.prim_systemInfo = function (index) {
    switch (index) {
        case 0:
            return "node";
        case 1:
            return $JSRTS.os.platform();
    }
    return "";
};

$JSRTS.prim_writeStr = function (x) { return process.stdout.write(x) };

$JSRTS.prim_readStr = function () {
    var ret = '';
    var b = Buffer.alloc(1024);
    var i = 0;
    while (true) {
        $JSRTS.fs.readSync(0, b, i, 1)
        if (b[i] == 10) {
            ret = b.toString('utf8', 0, i);
            break;
        }
        i++;
        if (i == b.length) {
            var nb = Buffer.alloc(b.length * 2);
            b.copy(nb)
            b = nb;
        }
    }
    return ret;
};

$JSRTS.die = function (message) {
    console.error(message);
    process.exit(-1);
};


var WebSocketServer = require('websocket').server;
var http = require('http');

function originIsAllowed(origin) {
  return true;
}


var gameState = (function () {

  /* The object that holds the game state */
  var state = {};
  console.log("wsServer1----");

  var server = http.createServer(function(request, response) {
    console.log((new Date()) + ' Received request for ' + request.url);
    response.writeHead(404);
    response.end();
  });
  server.listen(8080, function() {
    console.log((new Date()) + ' Server is listening on port 8080');
  });

  var wsServer = new WebSocketServer({
    httpServer: server,
    autoAcceptConnections: false
  });



    
    
  return {
      newState : function () {
        state = { state: 'SAFE' };	  
    },
      
    readState : function () {
      return state.state;
    },
    
    readHealth : function () {
      return state.health;
    },
    
    readEnemy : function () {
      return state.enemy;
    },
    
    writeStateStr : function (stateStr) {
      state.state = stateStr;
    },
    
    writeHealth : function (health) {
      state.health = health;
    },
     
    writeEnemy : function (enemy) {
      state.enemy = enemy;
    },


    wsServerOnRequest : function (on_request) {
	wsServer.on('request', on_request);
    },
    acceptConnection : function (req) {
	var conn = req.accept('echo-protocol',req.origin);
	//state.conn = conn;
        return conn;
    },
    
    setOnMsgHandler : function (c,fc) {
          c.on('message', fc);
    },
    setOnCloseHandler : function (c,fc) {
          c.on('close', fc);
    },

    getUtf8Data : function (msg) {
        if (msg.type==='utf8') {
	    return msg.utf8Data;
	} else {
	    return "";
	}	    
    },
/*      
    send_msg : function (a) {
	  state.conn.sendUTF( a );
    },
*/
    sendUTF : function (c,a) {
	  c.sendUTF( a ); //connection.sendUTF
    },
/*    
    on_msg_fc : function (msg) {
        if (msg.type==='utf8') {
	    console.log("Msg recv: " + msg.utf8Data);
            state.conn.sendUTF( msg.utf8Data );
	}
    },
*/      
    echoWS : function (callback) {
        console.log("setting up echoWS  " )
  
  wsServer.on('request', function(request) {
    if (!originIsAllowed(request.origin)) {
      // Make sure we only accept requests from an allowed origin
      request.reject();
      console.log((new Date()) + ' Connection from origin ' + request.origin + ' rejected.');
      return;
    }
    
    var connection = request.accept('echo-protocol', request.origin);
    
    console.log((new Date()) + ' Connection accepted.');
    
    connection.on('message', function(message) {
        if (message.type === 'utf8') {
            console.log('Received Message: ' + message.utf8Data);
	    
            connection.sendUTF( callback(message.utf8Data) );
        }
	/*
        else if (message.type === 'binary') {
            console.log('Received Binary Message of ' + message.binaryData.length + ' bytes');
            connection.sendBytes(message.binaryData);
        }
        */
    }); //connection.on
    
    connection.on('close', function(reasonCode, description) {
        console.log((new Date()) + ' Peer ' + connection.remoteAddress + ' disconnected.');
    });
    
  }          ); //wsServer.on(
	
	
    }, //echoWS
      
  }
  
}());


/*
var server = http.createServer(function(request, response) {
    console.log((new Date()) + ' Received request for ' + request.url);
    response.writeHead(404);
    response.end();
});
server.listen(8080, function() {
    console.log((new Date()) + ' Server is listening on port 8080');
});

wsServer = new WebSocketServer({
    httpServer: server,
    autoAcceptConnections: false
});

function originIsAllowed(origin) {
  // put logic here to detect whether the specified origin is allowed.
  return true;
}
*/

/*


wsServer.on('request', function(request) {
    
    var connection = request.accept('echo-protocol', request.origin);
    
    console.log((new Date()) + ' Connection accepted.');
    
    connection.on('message', function(message) {
        if (message.type === 'utf8') {
            console.log('Received MessageX4: ' + message.utf8Data);
            connection.sendUTF(message.utf8Data);
        }
    });
    
    connection.on('close', function(reasonCode, description) {
        console.log((new Date()) + ' Peer ' + connection.remoteAddress + ' disconnected.');
    });

    
});

*/


function $partial_1_3$$_3__123_runMain_95_0_125__95_lam(x1){
    return (function(x2){
        return (function(x3){
            return $_3__123_runMain_95_0_125__95_lam(x1, x2, x3);
        });
    });
}

function $partial_0_2$$_4__123_runMain_95_0_125__95_lam(){
    return (function(x1){
        return (function(x2){
            return $_4__123_runMain_95_0_125__95_lam(x1, x2);
        });
    });
}

const $HC_0_0$TheWorld = ({type: 0});
// Main.acceptConnection

function Main__acceptConnection($_0_arg, $_1_w){
    return (gameState.acceptConnection(($_0_arg)));
}

// Main.console_log

function Main__console_95_log($_0_x, $_1_w){
    return (console.log(($_0_x)));
}

// Main.getUtf8Data

function Main__getUtf8Data($_0_arg, $_1_w){
    return (gameState.getUtf8Data(($_0_arg)));
}

// Main.sendUTF

function Main__sendUTF($_0_arg, $_1_arg, $_2_w){
    return (gameState.sendUTF(($_0_arg),($_1_arg)));
}

// Main.setOnMsgHandler

function Main__setOnMsgHandler($_0_arg, $_1_arg, $_2_w){
    return (gameState.setOnMsgHandler(($_0_arg),((function(x){
        return $_1_arg(x)(null);
    }))));
}

// Main.wsServerOnRequest

function Main__wsServerOnRequest($_0_arg, $_1_w){
    return (gameState.wsServerOnRequest(((function(x){
        return $_0_arg(x)(null);
    }))));
}

// {runMain_0}

function $_0_runMain(){
    const $_16_in = Main__console_95_log("Starting ws", $HC_0_0$TheWorld);
    return $JSRTS.force(Main__wsServerOnRequest($partial_0_2$$_4__123_runMain_95_0_125__95_lam(), $HC_0_0$TheWorld));
}

// {{runMain_0}_lam_3}

function $_3__123_runMain_95_0_125__95_lam($_0_lift, $_1_lift, $_2_lift){
    const $_22_in = Main__getUtf8Data($_1_lift, $_2_lift);
    return Main__sendUTF($_0_lift, ($_22_in + "+X back"), $_2_lift);
}

// {{runMain_0}_lam_4}

function $_4__123_runMain_95_0_125__95_lam($_0_lift, $_1_lift){
    const $_19_in = Main__acceptConnection($_0_lift, $_1_lift);
    return Main__setOnMsgHandler($_19_in, $partial_1_3$$_3__123_runMain_95_0_125__95_lam($_19_in), $_1_lift);
}


$_0_runMain();
}.call(this))